-- 175
SELECT P.FirstName, P.LastName, A.City, A.State FROM PERSON P LEFT JOIN ADDRESS A ON P.PersonId = A.PersonId

-- 178
SELECT SCORE, DENSE_RANK() OVER(ORDER BY SCORE DESC) 'RANK' FROM SCORES
-- 180
SELECT DISTINCT A.NUM ConsecutiveNums FROM LOGS A, LOGS B, LOGS C WHERE A.ID + 1 = B.ID AND A.NUM = B.NUM AND A.ID + 2 = C.ID AND A.NUM = C.NUM
-- 181
SELECT E1.NAME 'Employee' FROM EMPLOYEE E1, EMPLOYEE E2 WHERE E1.MANAGERID = E2.ID AND E1.SALARY > E2.SALARY
-- 182
SELECT EMAIL FROM PERSON GROUP BY EMAIL HAVING COUNT(1) > 1
-- 183
SELECT NAME 'Customers' FROM CUSTOMERS C WHERE NOT EXISTS (SELECT 1 FROM ORDERS WHERE C.ID = ORDERS.customerId)

SELECT NAME 'Customers' FROM CUSTOMERS WHERE ID NOT IN (SELECT DISTINCT customerId FROM ORDERS)
-- 184
SELECT D.NAME DEPARTMENT, E.NAME EMPLOYEE, E.SALARY FROM
(SELECT ID, NAME, SALARY, DENSE_RANK() OVER(PARTITION BY DEPARTMENTID ORDER BY SALARY DESC) RANKING, DEPARTMENTID FROM EMPLOYEE) E,
DEPARTMENT D
WHERE E.RANKING = 1 AND E.DEPARTMENTID = D.ID

SELECT D.NAME DEPARTMENT, E.NAME EMPLOYEE, E.SALARY FROM
EMPLOYEE E JOIN DEPARTMENT D ON E.DEPARTMENTID = D.ID
WHERE (E.SALARY, E.DEPARTMENTID) IN (SELECT MAX(SALARY), DEPARTMENTID FROM EMPLOYEE GROUP BY DEPARTMENTID)
-- 185
SELECT D.NAME DEPARTMENT, E.NAME EMPLOYEE, E.SALARY FROM
(SELECT ID, NAME, SALARY, DENSE_RANK() OVER(PARTITION BY DEPARTMENTID ORDER BY SALARY DESC) RANKING, DEPARTMENTID FROM EMPLOYEE) E,
DEPARTMENT D
WHERE E.RANKING < 4 AND E.DEPARTMENTID = D.ID

SELECT D.NAME DEPARTMENT, E.NAME EMPLOYEE, E.SALARY FROM
EMPLOYEE E JOIN DEPARTMENT D ON E.DEPARTMENTID = D.ID
WHERE
(SELECT COUNT(DISTINCT SALARY) FROM EMPLOYEE WHERE SALARY > E.SALARY AND DEPARTMENTID = E.DEPARTMENTID) < 3
-- 196
-- MySQL 不允许在 DELETE 语句的 WHERE 子句中直接使用正在被更新的表
DELETE FROM PERSON
WHERE ID NOT IN
(SELECT A.ID FROM (SELECT MIN(ID) ID FROM PERSON GROUP BY EMAIL) A)

DELETE P1 FROM PERSON P1, PERSON P2 WHERE P1.EMAIL = P2.EMAIL AND P1.ID > P2.ID
-- 197
-- 上个月末是这个月月初的前一天，但差值不是1不能直接减法
SELECT W1.ID FROM WEATHER W1, WEATHER W2 WHERE DATEDIFF(W1.recordDate, W2.recordDate) = 1 AND W1.temperature > W2.temperature
-- 262
SELECT REQUEST_AT 'Day', ROUND(SUM(CASE T.STATUS WHEN 'completed' THEN 0 ELSE 1 END)/COUNT(1),2) 'Cancellation Rate'
FROM TRIPS T
JOIN USERS U1 ON T.CLIENT_ID = U1.USERS_ID AND U1.BANNED = 'No'
JOIN USERS U2 ON T.DRIVER_ID = U2.USERS_ID AND U2.BANNED = 'No'
WHERE
REQUEST_AT BETWEEN '2013-10-01' AND '2013-10-03'
GROUP BY REQUEST_AT